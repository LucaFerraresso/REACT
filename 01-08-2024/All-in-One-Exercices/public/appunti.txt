import React, { useState } from "react";
import { useSpring, animated } from "@react-spring/web";
import arrowSvg from "/public/Exercises/age-calculator-app-main/assets/images/icon-arrow.svg";

const AgeCalculator = () => {
  const [day, setDay] = useState("");
  const [month, setMonth] = useState("");
  const [year, setYear] = useState("");
  const [age, setAge] = useState({ years: "--", months: "--", days: "--" });
  const [error, setError] = useState("");

  const validateDate = (day, month, year) => {
    const birthDate = new Date(year, month - 1, day);
    const today = new Date();
    if (
      birthDate > today ||
      birthDate.getDate() !== parseInt(day) ||
      birthDate.getMonth() !== month - 1 ||
      birthDate.getFullYear() !== parseInt(year)
    ) {
      return false;
    }
    return true;
  };

  const calculateAge = (e) => {
    e.preventDefault();
    setError("");

    if (!validateDate(day, month, year)) {
      setError("Invalid date. Please enter a valid date.");
      return;
    }

    const birthDate = new Date(year, month - 1, day);
    const today = new Date();
    let ageYears = today.getFullYear() - birthDate.getFullYear();
    let ageMonths = today.getMonth() - birthDate.getMonth();
    let ageDays = today.getDate() - birthDate.getDate();

    if (ageDays < 0) {
      ageMonths -= 1;
      ageDays += new Date(today.getFullYear(), today.getMonth(), 0).getDate();
    }

    if (ageMonths < 0) {
      ageYears -= 1;
      ageMonths += 12;
    }

    setAge({
      years: ageYears < 0 ? "--" : ageYears,
      months: ageMonths < 0 ? "--" : ageMonths,
      days: ageDays < 0 ? "--" : ageDays,
    });
  };

  const ageAnimation = useSpring({
    years: age.years !== "--" ? age.years : 0,
    months: age.months !== "--" ? age.months : 0,
    days: age.days !== "--" ? age.days : 0,
    from: { years: 0, months: 0, days: 0 },
  });

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-off-white p-4">
      <form
        onSubmit={calculateAge}
        className="bg-white rounded-lg shadow-md p-8 md:p-16 text-center max-w-lg w-full relative"
      >
        <div className="absolute top-[-30px] right-[-30px] p-2 bg-purple rounded-full">
          <img src={arrowSvg} alt="arrow" />
        </div>
        <div className="mt-10 text-center flex items-center justify-center gap-6">
          <div>
            <label className="block text-smokey-grey uppercase tracking-widest">
              Day
            </label>
            <input
              type="number"
              value={day}
              onChange={(e) => setDay(e.target.value)}
              className={`w-20 p-2 text-2xl border-2 rounded-lg focus:outline-none ${
                error ? "border-red" : "border-light-grey focus:border-purple"
              }`}
              placeholder="DD"
              required
            />
            {error && (
              <div className="text-red text-xs">This field is required</div>
            )}
          </div>
          <div>
            <label className="block text-smokey-grey uppercase tracking-widest">
              Month
            </label>
            <input
              type="number"
              value={month}
              onChange={(e) => setMonth(e.target.value)}
              className={`w-20 p-2 text-2xl border-2 rounded-lg focus:outline-none ${
                error ? "border-red" : "border-light-grey focus:border-purple"
              }`}
              placeholder="MM"
              required
            />
            {error && (
              <div className="text-red text-xs">This field is required</div>
            )}
          </div>
          <div>
            <label className="block text-smokey-grey uppercase tracking-widest">
              Year
            </label>
            <input
              type="number"
              value={year}
              onChange={(e) => setYear(e.target.value)}
              className={`w-28 p-2 text-2xl border-2 rounded-lg focus:outline-none ${
                error ? "border-red" : "border-light-grey focus:border-purple"
              }`}
              placeholder="YYYY"
              required
            />
            {error && (
              <div className="text-red text-xs">This field is required</div>
            )}
          </div>
        </div>
        <button
          type="submit"
          className="mt-4 px-6 py-2 bg-purple text-white text-xl font-semibold rounded-full hover:bg-purple-dark transition-all duration-300"
        >
          Calculate
        </button>
      </form>
      <div className="mt-10 text-center flex items-center justify-center gap-4">
        <animated.div className="text-5xl font-extrabold text-purple">
          {age.years === "--"
            ? "--"
            : ageAnimation.years.to((val) => Math.floor(val))}
        </animated.div>
        <div className="text-2xl font-bold">years</div>
        <animated.div className="text-5xl font-extrabold text-purple">
          {age.months === "--"
            ? "--"
            : ageAnimation.months.to((val) => Math.floor(val))}
        </animated.div>
        <div className="text-2xl font-bold">months</div>
        <animated.div className="text-5xl font-extrabold text-purple">
          {age.days === "--"
            ? "--"
            : ageAnimation.days.to((val) => Math.floor(val))}
        </animated.div>
        <div className="text-2xl font-bold">days</div>
      </div>
    </div>
  );
};

export default AgeCalculator; ////funzionante


import React, { useState } from "react";

const MortgageCalculator = () => {
  const [amount, setAmount] = useState("");
  const [term, setTerm] = useState("");
  const [rate, setRate] = useState("");
  const [type, setType] = useState("repayment");
  const [error, setError] = useState("");

  const validateFields = () => {
    if (!amount || !rate) {
      setError("All fields are required");
      return false;
    }
    setError("");
    return true;
  };

  const calculateRepayments = (e) => {
    e.preventDefault();

    if (!validateFields()) return;
    console.log(amount, term, rate, type);
    const month = term * 12;
    const mortage = [(amount * (rate / 100)) / month];

    console.log(mortage);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-slate100 p-4">
      <form
        onSubmit={calculateRepayments}
        className="bg-white p-8 rounded-lg shadow-md w-full max-w-lg"
      >
        <h2 className="text-xl font-bold mb-6">Mortgage Calculator</h2>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Mortgage Amount</label>
          <input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className={`w-full p-2 border rounded ${
              error && !amount ? "border-red" : "border-slate300"
            }`}
            placeholder="Â£"
          />
        </div>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Mortgage Term</label>
          <div className="flex">
            <input
              type="number"
              value={term}
              onChange={(e) => setTerm(e.target.value)}
              className={`w-1/2 p-2 border rounded ${
                error && !term ? "border-red" : "border-slate300"
              }`}
              placeholder="Years"
            />
            <span className="self-center ml-2 text-slate700">years</span>
          </div>
        </div>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Interest Rate</label>
          <div className="flex">
            <input
              type="number"
              value={rate}
              onChange={(e) => setRate(e.target.value)}
              className={`w-1/2 p-2 border rounded ${
                error && !rate ? "border-red" : "border-slate300"
              }`}
              placeholder="Rate"
            />
            <span className="self-center ml-2 text-slate700">%</span>
          </div>
        </div>
        <div className="mb-6">
          <label className="block mb-2 text-slate700">Mortgage Type</label>
          <div className="flex gap-4">
            <label className="flex items-center">
              <input
                type="radio"
                value="repayment"
                checked={type === "repayment"}
                onChange={(e) => setType(e.target.value)}
                className="mr-2"
              />
              Repayment
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                value="interestOnly"
                checked={type === "interestOnly"}
                onChange={(e) => setType(e.target.value)}
                className="mr-2"
              />
              Interest Only
            </label>
          </div>
        </div>
        {error && <div className="text-red mb-4">{error}</div>}
        <button
          type="submit"
          className="w-full p-3 bg-lime text-white rounded font-bold hover:bg-lime-dark"
        >
          Calculate Repayments
        </button>
      </form>
    </div>
  );
};

export default MortgageCalculator;//non funzionante


/////////
import React, { useState } from "react";

const MortgageCalculator = () => {
  const [amount, setAmount] = useState("");
  const [term, setTerm] = useState("");
  const [rate, setRate] = useState("");
  const [type, setType] = useState("repayment");
  const [error, setError] = useState("");
  const [result, setResult] = useState(null);

  const validateFields = () => {
    if (!amount || !rate) {
      setError("All fields are required");
      return false;
    }
    setError("");
    return true;
  };

  const calculateRepayments = (e) => {
    e.preventDefault();
    if (!validateFields()) return;

    // Logica di calcolo dei pagamenti
    const calculatedResult = {
      monthlyPayment: (amount * rate) / 100 / term, // Simulazione del calcolo
      totalPayment: amount * (1 + rate / 100),
      totalInterest: amount * (rate / 100),
    };
    setResult(calculatedResult);
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-slate100 p-4">
      <form
        onSubmit={calculateRepayments}
        className="bg-white p-8 rounded-lg shadow-md w-full max-w-lg mb-6"
      >
        <h2 className="text-xl font-bold mb-6">Mortgage Calculator</h2>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Mortgage Amount</label>
          <input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className={`w-full p-2 border rounded ${
              error && !amount ? "border-red" : "border-slate300"
            }`}
            placeholder="Â£"
          />
        </div>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Mortgage Term</label>
          <div className="flex">
            <input
              type="number"
              value={term}
              onChange={(e) => setTerm(e.target.value)}
              className={`w-1/2 p-2 border rounded ${
                error && !term ? "border-red" : "border-slate300"
              }`}
              placeholder="Years"
            />
            <span className="self-center ml-2 text-slate700">years</span>
          </div>
        </div>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Interest Rate</label>
          <div className="flex">
            <input
              type="number"
              value={rate}
              onChange={(e) => setRate(e.target.value)}
              className={`w-1/2 p-2 border rounded ${
                error && !rate ? "border-red" : "border-slate300"
              }`}
              placeholder="Rate"
            />
            <span className="self-center ml-2 text-slate700">%</span>
          </div>
        </div>
        <div className="mb-6">
          <label className="block mb-2 text-slate700">Mortgage Type</label>
          <div className="flex gap-4">
            <label className="flex items-center">
              <input
                type="radio"
                value="repayment"
                checked={type === "repayment"}
                onChange={(e) => setType(e.target.value)}
                className="mr-2"
              />
              Repayment
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                value="interestOnly"
                checked={type === "interestOnly"}
                onChange={(e) => setType(e.target.value)}
                className="mr-2"
              />
              Interest Only
            </label>
          </div>
        </div>
        {error && <div className="text-red mb-4">{error}</div>}
        <button
          type="submit"
          className="w-full p-3 bg-lime text-white rounded font-bold hover:bg-lime-dark transition duration-300"
        >
          Calculate Repayments
        </button>
      </form>

      {result && (
        <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-lg text-center">
          <h2 className="text-xl font-bold mb-4">Results</h2>
          <p className="text-slate700 mb-2">
            Monthly Payment: Â£{result.monthlyPayment.toFixed(2)}
          </p>
          <p className="text-slate700 mb-2">
            Total Payment: Â£{result.totalPayment.toFixed(2)}
          </p>
          <p className="text-slate700 mb-2">
            Total Interest: Â£{result.totalInterest.toFixed(2)}
          </p>
        </div>
      )}
    </div>
  );
};

export default MortgageCalculator;

  const calculateRepayments = (e) => {
    e.preventDefault();
    if (!validateFields()) return;

    const months = term * 12;
    const monthlyRate = rate / 100 / 12;
    const denominator = Math.pow(1 + monthlyRate, months) - 1;

    const monthlyPayment =
      amount * monthlyRate * (Math.pow(1 + monthlyRate, months) / denominator);
    const totalPayment = monthlyPayment * months;
    const totalInterest = totalPayment - amount;

    const calculatedResult = {
      monthlyPayment: monthlyPayment.toFixed(2),
      totalPayment: totalPayment.toFixed(2),
      totalInterest: totalInterest.toFixed(2),
    };


/////////////////////
import React, { useState } from "react";

const MortgageCalculator = () => {
  const [amount, setAmount] = useState("");
  const [term, setTerm] = useState("");
  const [rate, setRate] = useState("");
  const [type, setType] = useState("repayment");
  const [error, setError] = useState("");
  const [result, setResult] = useState(null);

  const validateFields = () => {
    if (!amount || !rate) {
      setError("All fields are required");
      return false;
    }
    setError("");
    return true;
  };

  const calculateRepayments = (e) => {
    e.preventDefault();

    if (!validateFields()) return;
    console.log(amount, term, rate, type);
    const month = term * 12;
    const mortage = [(amount * (rate / 100)) / month];

    console.log(mortage);
    setResult(mortage);
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-slate100 p-4">
      <form
        onSubmit={calculateRepayments}
        className="bg-white p-8 rounded-lg shadow-md w-full max-w-lg mb-6"
      >
        <h2 className="text-xl font-bold mb-6">Mortgage Calculator</h2>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Mortgage Amount</label>
          <input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className={`w-full p-2 border rounded ${
              error && !amount ? "border-red" : "border-slate300"
            }`}
            placeholder="Â£"
          />
        </div>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Mortgage Term</label>
          <div className="flex">
            <input
              type="number"
              value={term}
              onChange={(e) => setTerm(e.target.value)}
              className={`w-1/2 p-2 border rounded ${
                error && !term ? "border-red" : "border-slate300"
              }`}
              placeholder="Years"
            />
            <span className="self-center ml-2 text-slate700">years</span>
          </div>
        </div>
        <div className="mb-4">
          <label className="block mb-2 text-slate700">Interest Rate</label>
          <div className="flex">
            <input
              type="number"
              value={rate}
              onChange={(e) => setRate(e.target.value)}
              className={`w-1/2 p-2 border rounded ${
                error && !rate ? "border-red" : "border-slate300"
              }`}
              placeholder="Rate"
            />
            <span className="self-center ml-2 text-slate700">%</span>
          </div>
        </div>
        <div className="mb-6">
          <label className="block mb-2 text-slate700">Mortgage Type</label>
          <div className="flex gap-4">
            <label className="flex items-center">
              <input
                type="radio"
                value="repayment"
                checked={type === "repayment"}
                onChange={(e) => setType(e.target.value)}
                className="mr-2"
              />
              Repayment
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                value="interestOnly"
                checked={type === "interestOnly"}
                onChange={(e) => setType(e.target.value)}
                className="mr-2"
              />
              Interest Only
            </label>
          </div>
        </div>
        {error && <div className="text-red mb-4">{error}</div>}
        <button
          type="submit"
          className="w-full p-3 bg-lime text-white rounded font-bold hover:bg-lime-dark transition duration-300"
        >
          Calculate Repayments
        </button>
      </form>

      {result && (
        <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-lg text-center">
          <h2 className="text-xl font-bold mb-4">Results</h2>
          <div className="grid grid-cols-1 gap-4">
            <div className="bg-slate100 p-4 rounded">
              <p className="text-slate900 font-semibold">Monthly Payment</p>
              <p className="text-slate700">Â£{result.monthlyPayment}</p>
            </div>
            <div className="bg-slate100 p-4 rounded">
              <p className="text-slate900 font-semibold">Total Payment</p>
              <p className="text-slate700">Â£{result.totalPayment}</p>
            </div>
            <div className="bg-slate100 p-4 rounded">
              <p className="text-slate900 font-semibold">Total Interest</p>
              <p className="text-slate700">Â£{result.totalInterest}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MortgageCalculator;