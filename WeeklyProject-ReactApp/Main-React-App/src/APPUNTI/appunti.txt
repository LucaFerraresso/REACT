//array cmpleted filtrato

//pagetwo

useEffect(async () => {
    const data = await fetch("https://jsonplaceholder.typicode.com/todos");
    const response = await data.json();
    const filteredArray = response.filter((item) => item.completed === true);
    console.log("JSON", filteredArray);
    setData(filteredArray);
  }, []);

  //page one article per prodotti funzionante
  
   {data.map((item) => (
          <article className="flex bg-white transition hover:shadow-xl">
            <div className="hidden sm:block sm:basis-56">
              <img
                alt=""
                src={item.image}
                className="aspect-square h-full w-full object-cover"
              />
            </div>

            <div className="flex flex-1 flex-col justify-between">
              <div className="border-s border-gray-900/10 p-4 sm:border-l-transparent sm:p-6">
                <a href="#">
                  <h3 className="font-bold uppercase text-gray-900">
                    {item.title}
                  </h3>
                </a>

                <p className="mt-2 line-clamp-3 text-sm/relaxed text-gray-700">
                  {item.description}
                </p>
              </div>
              <div className="flex flex-wrap gap-1 p-4 text-xs text-gray-700">
                <span className="mr-2 rounded-full bg-yellow-200 px-2 py-1">
                  category:{item.category}
                </span>
                <span className="mr-2 rounded-full bg-yellow-200 px-2 py-1">
                  price:{item.price}â‚¬
                </span>
                <span className="mr-2 rounded-full bg-yellow-200 px-2 py-1">
                  quantity:{item.quantity}/300
                </span>
              </div>

              <div className="sm:flex sm:items-end sm:justify-end">
                <Link
                  to="/"
                  className="block bg-yellow-300 px-5 py-3 text-center text-xs font-bold uppercase text-gray-900 transition hover:bg-yellow-400"
                >
                  Read Blog
                </Link>
              </div>
            </div>
          </article>
        ))}

chiata getch al rendere della home page 
useEffect(() => {
    fetch("http://localhost:3000/products")
      .then((response) => response.json())
      .then((json) => setData(json));
  }, []);


  ///////homepage layout design 1 prova

  import { useState, useEffect } from "react";
import Modal from "../components/atoms/Modal";
const HomePage = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  //al click mi sposto alla pagina uno

  const toPageOne = () => {
    window.location.href = "/pageone";
  };
  const toPageTwo = () => {
    window.location.href = "/pagetwo";
  };
  const toPageThree = () => {
    window.location.href = "/pagethree";
  };
  return (
    <>
      {" "}
      {/*inizio div app*/}
      <div className="grid grid-rows-3 grid-cols-3 gap-6 justify-center items-center p-[16px] bg-gray-300 h-full w-full">
        {/*inizio div 1 in app con modale*/}
        <div className="flex flex-row justify-between items-center p-[16px] bg-blue-700 h-full w-full">
          {" "}
          <h1
            onClick={() => setIsModalOpen(true)}
            className="bg-blue-500 text-bold text-white p-2 rounded-md "
          >
            All products
          </h1>
          <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
            {" "}
            <h1 className="bg-blue-500  text-white p-2 rounded-md">
              All products
            </h1>
          </Modal>
          <button
            onClick={toPageOne}
            className="bg-blue-500 cursor-pointer text-white underline"
          >
            PAGE ONE
          </button>
        </div>
        {/*inizio div 1 app*/}

        {/*inizio div 2 app con modale */}
        <div className="flex flex-row justify-between items-center p-[16px] bg-green-700 h-full w-full">
          {" "}
          <h1
            onClick={() => setIsModalOpen(true)}
            className="bg-green-500  text-white p-2 rounded-md "
          >
            Categories
          </h1>
          <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
            {" "}
            <h1 className="bg-green-500  text-bold text-white p-2 rounded-md ">
              Categories
            </h1>
          </Modal>
          <button
            onClick={toPageTwo}
            className="bg-green-500 cursor-pointer text-white underline"
          >
            PAGE TWO
          </button>
        </div>
        {/*fine div 2 app*/}

        {/*inizio div 3 in app con modale*/}
        <div className="flex flex-row justify-between items-center p-[16px] bg-red-700 h-full w-full">
          {" "}
          <h1
            onClick={() => setIsModalOpen(true)}
            className="bg-red-500  text-white p-2 rounded-md "
          >
            Favorites
          </h1>
          <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
            {" "}
            <h1 className="bg-red-500  text-bold text-white p-2 rounded-md ">
              Favorites
            </h1>
          </Modal>
          <button
            onClick={toPageThree}
            className="bg-red-500 cursor-pointer text-white underline"
          >
            PAGE THREE
          </button>
        </div>
        {/*fine div 3 app*/}
      </div>
      {/*fine div app*/}
    </>
  );
};

export default HomePage;
//fetch in locale, no immagini
http://localhost:3000/product
//prima API (20 PRODOTTI si immagini)
https://fakestoreapi.com/products
// SECONDA API (20 PRODOTTI no immagini)
https://api.storerestapi.com/products [json.data]


//usecontext navbar elementi carrello risolto

//skeloton
import Skeleton from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";

//map cart array return (
    <>
      <div>...is rendering shop</div>
      <div className="bg-blue-200  grid grid-cols-2 style-none gap-2 p-4 ">
        {product.length === 0 || isloading ? (
          <>
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
          </>
        ) : (
          product.map((item) => {
            return (
              <div key={item.id}>
                <p>{item.title}</p>
              </div>
            );
          })
        )}
      </div>
    </>
  );
};

//parte rimanente shop
import { useContext, useEffect, useState } from "react";
import { ProductContext, setProductContext } from "../providers/ProductContext";

import Skeleton from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";
import getProductsList from "../DataClient/DataClient";

const Shop = () => {
  const [isloading, setIsLoading] = useState(true);
  const [product, setProduct] = useState([]);
  const { products } = useContext(ProductContext);
  const { setProducts } = useContext(setProductContext);
  console.log(products);
  const array = [];
  const getArray = () => {
    for (let i = 0; i < products.length; i++) {
      const element = products[i];
      array.push(element);
    }
    console.log("array finale prodotti", array);
    return array;
  };
  const getproducts = async () => {
    //filtra il data con gli id dell'array sopra
    //poi renderizzo gli oggetti filtrati
    const data = await getProductsList();
    console.log("data", data);
    setIsLoading(false);
  };
  const renderProducts = async () => {
    const data = await getProductsList();

    console.log("data in render", data);
    getArray();
    console.log("array in render", array);
    const arrayFinale = [];
    for (let i = 0; i < array.length; i++) {
      const element = array[i];
      arrayFinale.push(element);
    }
    console.log("array finale", arrayFinale);
    setProduct(arrayFinale);
  };

  useEffect(() => {
    getproducts();
    getArray();
    renderProducts();
  }, []);

  //pagina shop prima del debugging

  import { useContext, useEffect, useState } from "react";
import Skeleton from "react-loading-skeleton";
import { ProductContext, setProductContext } from "../providers/ProductContext";
import "react-loading-skeleton/dist/skeleton.css";
import getProductsList from "../DataClient/DataClient";
import Item from "../components/atoms/item";

const array = [];
const Shop = () => {
  const [isloading, setIsLoading] = useState(true);
  const { products } = useContext(ProductContext);
  const [cart, setCart] = useState([]);

  const getArray = () => {
    for (let i = 0; i < products.length; i++) {
      const element = products[i];
      array.push(element);
    }
  };
  const filteredCart = [];

  const getCart = async () => {
    const data = await getProductsList();
    for (let i = 0; i < array.length; i++) {
      const id = array[i];
      const filteredData = await data.find((product) => product.id == id);
      filteredCart.push(filteredData);

      console.log(filteredData);

      setIsLoading(false);
    }
    console.log("definitivo", filteredCart);
    setCart(filteredCart);
  };

  useEffect(() => {
    getCart();
    getArray();
  }, []);

  return (
    <>
      <div>...cart is loading...</div>
      <div className="bg-green-200  grid grid-cols-2 style-none gap-2 p-4 ">
        {isloading ? (
          <>
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
            <Skeleton height={300} />
          </>
        ) : (
          cart.map((item) => <Item key={item.id} item={item} />)
        )}
      </div>
    </>
  );
};
export default Shop;

//card ottimizzata

<div className="flex flex-col justify-center h-[600px] w-[480px] rounded-3xl overflow-hidden shadow-lg transition duration-300 transform hover:scale-105">
  <div className="group relative block overflow-hidden">
    <button
      className="absolute right-4 top-4 z-10 rounded-full bg-white p-1.5 text-gray-900 transition hover:text-red-500"
      onClick={handleFavorite}
      id={item.id}
    >
      <span className="sr-only">Wishlist</span>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth="1.5"
        stroke="currentColor"
        className="h-4 w-4"
        aria-hidden="true"
        style={{ color: "black" }}
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"
        />
      </svg>
    </button>

    <img
      src={item.image}
      alt=""
      className="h-64 w-full object-cover transition duration-500 group-hover:scale-105 sm:h-72"
    />

    <div className="relative border border-gray-100 bg-white p-6">
      <span className="whitespace-nowrap bg-yellow-400 px-3 py-1.5 text-xs font-medium">
        New
      </span>

      <h3 className="mt-4 text-lg font-medium text-gray-900">{item.title}</h3>

      <p className="mt-1.5 text-sm text-gray-700">{item.price}$</p>
      <p className="mt-1.5 text-sm text-gray-700">ID: {item.id}</p>
      <p className="mt-1.5 text-sm text-gray-700">Description: {description}</p>
      <div className="sm:flex sm:items-end sm:justify-end">
        <Link
          to={/products/${item.id}}
          className="block bg-yellow-300 px-5 py-3 text-center text-xs font-bold uppercase text-gray-900 transition hover:bg-yellow-400 focus:bg-yellow-500 active:bg-yellow-600"
        >
          Read More
        </Link>
      </div>

<div className="flex flex-col justify-center h-[600px] w-[480px] rounded-3xl overflow-hidden shadow-lg transition duration-300 transform hover:scale-105">
  <div className="group relative block overflow-hidden">
    <button
      className="absolute right-4 top-4 z-10 rounded-full bg-white p-1.5 text-gray-900 transition hover:text-red-500"
      onClick={handleFavorite}
      id={item.id}
    >
      <span className="sr-only">Wishlist</span>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        strokeWidth="1.5"
        stroke="currentColor"
        className="h-4 w-4"
        aria-hidden="true"
        style={{ color: "black" }}
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"
        />
      </svg>
    </button>

    <img
      src={item.image}
      alt=""
      className="h-64 w-full object-cover transition duration-500 group-hover:scale-105 sm:h-72"
    />

    <div className="relative border border-gray-100 bg-white p-6">
      <span className="whitespace-nowrap bg-yellow-400 px-3 py-1.5 text-xs font-medium">
        New
      </span>

      <h3 className="mt-4 text-lg font-medium text-gray-900">{item.title}</h3>

      <p className="mt-1.5 text-sm text-gray-700">{item.price}$</p>
      <p className="mt-1.5 text-sm text-gray-700">ID: {item.id}</p>
      <p className="mt-1.5 text-sm text-gray-700">Description: {description}</p>
      <div className="sm:flex sm:items-end sm:justify-end">
        <Link
          to={/products/${item.id}}
          className="block bg-yellow-300 px-5 py-3 text-center text-xs font-bold uppercase text-gray-900 transition hover:bg-yellow-400 focus:bg-yellow-500 active:bg-yellow-600"
        >
          Read More
        </Link>
      </div>

      <div className="mt-4">
        <button
          id={item.id}
          onClick={addToCart}
          className="block w-full rounded bg-yellow-400 p-4 text-sm font-medium transition hover:bg-yellow-500 focus:bg-yellow-600 active:bg-yellow-700 disabled:bg-gray-300 disabled:cursor-not-allowed hover:scale-105"
        >
          Add to Cart
        </button>
      </div>
    </div>
  </div>
</div>

    

